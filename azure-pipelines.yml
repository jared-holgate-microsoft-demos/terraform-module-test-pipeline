trigger:
- main

resources:
  repositories:
    - repository: terraform_module #This is the name you will reference in the checkout step
      type: github
      endpoint: jared-holgate-microsoft-demos #This is the name of the Service Connection (see: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&tabs=schema#define-a-repositories-resource)
      name: jared-holgate-microsoft-demos/terraform-module-test-module #This is the name of the repo with the org specified

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  persistCredentials: true #This is required to keep the github git token in the config (the token is valid for the module repo, even if you don't specifiy this flag on the module checkout step)
  path: s #Tell it to checkout in the default location, so nothing else needs to change in the pipeline.

- pwsh: |
    New-Item -Path . -Name "terraform-module-test-module" -ItemType Directory -Force #This is here to remove an annoying warning message.
  displayName: 'Setup temp folder'
  
- checkout: terraform_module #The module name as declared in the resources section above.
  path: s/temp_module #Tell it to checkout into a temp location as we don't actually need to use the module code.

- pwsh: |
    $token = git config --get http.$(Build.Repository.Uri).extraheader #Get the token from the .git/config file.
    git config --global http.https://github.com.extraheader $token #Add the token to our global git config. NOTE: You may need to do something different or remove this token as a final step if you are not using ephemeral agents.
  displayName: 'Get Config Pipeline'

- script: terraform init
  displayName: 'Terraform Init'
  env:
    TF_LOG: TRACE #This is just here to help with debugging, you can remove for prod.

- script: terraform apply -auto-approve
  displayName: 'Terrafrom Apply'
